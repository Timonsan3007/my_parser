import requests
from datetime import datetime, timedelta
import asyncio
from config import VK_GROUPS, KEYWORDS, EXCLUDED_KEYWORDS, VK_SERVICE_KEY

API_VERSION = "5.131"
VK_API_URL = "https://api.vk.com/method/wall.get"


def parse_date(timestamp):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç Unix-–≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì –ß–ß:–ú–ú.
    """
    try:
        post_date = datetime.fromtimestamp(timestamp)
        return post_date.strftime("%d.%m.%y %H:%M")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç—ã: {e}")
        return None


async def fetch_vk_posts():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å—Ç—ã –∏–∑ –≥—Ä—É–ø–ø –í–ö –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –∏—Ö –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.
    """
    news_list = []
    one_day_ago = datetime.now() - timedelta(days=1)

    for group in VK_GROUPS:
        try:
            response = requests.get(
                VK_API_URL,
                params={
                    "owner_id": f"-{group.replace('club', '')}" if group.isdigit() else group,
                    "count": 10,
                    "access_token": VK_SERVICE_KEY,
                    "v": API_VERSION,
                },
                timeout=10,
            )
            data = response.json()

            if "response" in data:
                for post in data["response"]["items"]:
                    text = post.get("text", "").strip()
                    post_id = post.get("id")
                    group_id = post.get("owner_id")
                    date = post.get("date")
                    link = f"https://vk.com/wall{group_id}_{post_id}"

                    formatted_date = parse_date(date)
                    if not formatted_date:
                        continue

                    post_date = datetime.fromtimestamp(date)
                    if post_date < one_day_ago:
                        continue

                    text_lower = text.lower()
                    if (
                        any(keyword.lower() in text_lower for keyword in KEYWORDS)
                        and not any(excluded.lower() in text_lower for excluded in EXCLUDED_KEYWORDS)
                    ):
                        news_list.append({
                            "title": text[:100] + "..." if len(text) > 100 else text,
                            "link": link,
                            "date": formatted_date,
                        })

            elif "error" in data:
                error_code = data["error"].get("error_code")
                error_msg = data["error"].get("error_msg")
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç {group}: [{error_code}] {error_msg}")

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await asyncio.sleep(0.5)

        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è {group}: {e}")

    return news_list


if __name__ == "__main__":
    vk_news = asyncio.run(fetch_vk_posts())

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
    vk_news.sort(key=lambda x: datetime.strptime(x["date"], "%d.%m.%y %H:%M"), reverse=True)

    # –í—ã–≤–æ–¥–∏–º –Ω–æ–≤–æ—Å—Ç–∏
    seen_links = set()
    for news in vk_news:
        if news['link'] not in seen_links:
            seen_links.add(news['link'])
            print(
                f"üì¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {news['title']}\n"
                f"üîó –°—Å—ã–ª–∫–∞: {news['link']}\n"
                f"üìÖ –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {news['date']}\n"
                f"{'-' * 50}"
            )